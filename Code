#include <stdio.h>
#include<time.h>
#include<string.h>


int chour();
int cmin();
void waittime();
void entry();
void display();
void getpriority();
void prioritysort();
void check();
void swap(int);
void qfunc();
void qshift();


struct pc
{
    char name[10];
    char surname[10];                                                                                                       
    int inhour;
    int inmin;
    int outhour;
    int outmin;
    int priority;
    int pcno;
}m[3];

struct queue
{
    char name[10];
    char surname[10]; 
    int qh;
    int qm;
    int wh;
    int wm;
    int inh;
    int inmin;
}q[10];

int rear=-1;
int countpc=-1;
int top=-1;

int chour()
{
    time_t now;
    time(&now);
    struct tm *mytime = localtime(&now);
    return mytime->tm_hour;
}

int cmin()
{
    
    time_t now;
    time(&now);
    struct tm *mytime = localtime(&now);
    return mytime->tm_min;
}

void qfunc()
{   
    getpriority();
    prioritysort();
    check();
    getpriority();
    prioritysort();
    
    top++;
    int temph,tempm,wq;
    int ans;
    printf("Enter the booking hours and min** 'max 3 hours'\n");
    scanf("%d",&q[top].qh);
    scanf("%d",&q[top].qm);
    waittime();
    
    printf("Waiting time is %d hours and %d mins\n",q[top].wh,q[top].wm);
    printf("do you want to wait \npress 1 (yes)  2 (no)\n");
   
    scanf("%d",&ans);
    
    if(ans==1) 
    {
        printf("Enter your name\n");
        scanf("%s",q[top].name);
        
        scanf("%s",q[top].surname);
        
        printf("Placed in waiting queue\n");
    }    
        
    else
    {
        top--;
    }    
    getpriority();
    prioritysort();
    check();
    getpriority();
    prioritysort();
}

void waittime()
{   
    int cuhour, cumin, j=0,i;
    int hour;
    int min;
    int temp;
    cuhour=chour();
    cumin=cmin();
    
    int tempwh,tempwm;
    
        for(i=0;i<=top;i++)
        {
           if(i<1)
            {
                hour=m[i].outhour-cuhour;  
                min=m[i].outmin-cumin;
                if(min<0)
                {
                    min+=60;
                    hour-=1;
                }
                q[i].wh=hour;
                q[i].wm=min;
                
                
                
            }    
            
            else if(i>=1 && i<=2)
            {
                tempwh=q[i-1].wh+q[i-1].qh;
                tempwm=q[i-1].wm+q[i-1].qm;
                
                if(tempwm>60)           //min goes more than 60
                {
                    tempwh+=1;
                     tempwm-=60;
                }
                
                hour=m[i].outhour-cuhour;  
                min=m[i].outmin-cumin;
                if(min<0)
                {
                    min+=60;
                    hour-=1;
                }
                
                
                if((tempwh<hour) || (tempwh==hour)&&(tempwm<min))
                {
                    q[i].wh=tempwh;
                    q[i].wm=tempwm;
                }
                else
                {
                    q[i].wh=hour;
                    q[i].wm=min;
                }
            }
            
            else if(i>2)
            {
                tempwh=q[i-3].wh+q[i-3].qh;
                tempwm=q[i-3].wm+q[i-3].qm;
                
                if(tempwm>60)           //min goes more than 60
                {
                    tempwh+=1;
                     tempwm-=60;
                }
                q[i].wh=tempwh;
                q[i].wm=tempwm;
            }
        }
        for(j=0;j<=top-1;j++)
        {
            for(i=0;i<=top-i-1;i++)
            {
            if((q[i].wh>q[i+1].wh)||((q[i].wh==q[i+1].wh)&&(q[i].wm>q[i+1].wm)))
            {
                temp=q[i-1].wh;
                q[i-1].wh=q[i].wh;
                q[i].wh=temp;
                temp=q[i-1].wm;
                q[i-1].wm=q[i].wm;
                q[i].wm=temp;
            }
            }
        }
    
}


void entry()                //to insert element
{       
    int choice=0;
    int h,mi;
    
    if(rear==2)
    {   
        qfunc();
    }
    
    else
    {   countpc++;
       rear++;
    m[rear].pcno=rear+1; 
    m[rear].inhour=chour();
    m[rear].inmin=cmin();
      
    printf("Enter your name\n");
    scanf("%s",m[rear].name);
    
    scanf("%s",m[rear].surname);
    printf("Enter the booking hours and min** 'max 3 hours'\n");
    scanf("%d",&h);
    scanf("%d",&mi);
    m[rear].outhour=m[rear].inhour + h;
    m[rear].outmin=m[rear].inmin+mi;
    
    if(m[rear].outmin>60)           //min goes more than 60
    {
        m[rear].outhour+=1;
        m[rear].outmin-=60;
    }
        
        getpriority();
        prioritysort();
        check();
        getpriority();
        prioritysort();
    }
}

void display()
{   getpriority();
    prioritysort();
    check();
    getpriority();
    prioritysort();
    printf("pc.no  Name\t\tIn Time\tOuttime\tPriority\n");
    for(int j=0;j<3;j++)
    {       
        
        if(m[j].inhour!=0)
        {
        printf("%d      %s %s\t%d:%d\t%d:%d\t%d\n",m[j].pcno,m[j].name,m[j].surname,m[j].inhour,m[j].inmin,m[j].outhour,m[j].outmin,m[j].priority);
        }
        else
        {  if(rear<2)
            {
                m[j].pcno=j+1;
            }
            printf("%d   Empty\n",m[j].pcno);
        }
    }
    printf("Current time %d:%d\n",chour(),cmin());
}

void getpriority()            //This sets priorities to all entries
{
        int k,j,h,mi,priority;
        
    for(j=0;j<=rear;j++)  
    {   
        priority=1;  
       h= m[j].outhour;
       mi= m[j].outmin;
        for(k=0;k<=rear;k++)
        {
            if((h > m[k].outhour) || (h == m[k].outhour && mi > m[k].outmin))
            {
                priority++;
            }
        }
        
        m[j].priority=priority;
    }
}

void prioritysort()         // This sorts all entries accordig to priorty
{
    for(int j=0;j<rear;j++)
    {
        for(int k=0;k<rear-j;k++)
        {
            if(m[k].priority>m[k+1].priority)
            {
                swap(k);
            }
        }
    }
}

void swap(int k)                //swap function to swap two entries
{   
    char tn[10];
    char ts[10];
    
    strcpy(tn,m[k+1].name);
    strcpy(m[k+1].name,m[k].name);
    strcpy(m[k].name,tn);
    
    strcpy(ts,m[k+1].surname);
    strcpy(m[k+1].surname,m[k].surname);
    strcpy(m[k].surname,ts);

    int ih=m[k].inhour;
    int im=m[k].inmin;
    int oh=m[k].outhour;
    int om=m[k].outmin;
    int pr=m[k].priority;
    int pcno=m[k].pcno;
      
    m[k].inhour=m[k+1].inhour;
    m[k].inmin=m[k+1].inmin;
    m[k].outhour=m[k+1].outhour;
    m[k].outmin=m[k+1].outmin;
    m[k].priority=m[k+1].priority;
    m[k].pcno=m[k+1].pcno;
    
    m[k+1].inhour=ih;
    m[k+1].inmin=im;
    m[k+1].outhour=oh;
    m[k+1].outmin=om;
    m[k+1].priority=pr;
    m[k+1].pcno=pcno;
}

void check()  // to clear
{   
    getpriority();
    prioritysort();
    
    char tn[10];
    char ts[10];
    int j;
    for(j=0;j<=rear;j++)
    {
        if((m[j].outhour<chour()) || (m[j].outhour==chour() && m[j].outmin<=cmin()))  //clear
        {
            m[j].inhour=0;
            
            countpc--;
            if(top>=0)
            {

    
                strcpy(m[j].name,q[0].name);
                printf("\n\nswapped name\n\n");
                printf("%s\n\n",m[j].name);
    
                strcpy(m[j].surname,q[0].surname);
             
                m[j].inhour=m[j].outhour;
                m[j].inmin=m[j].outmin;
                
                m[j].outhour= q[0].qh+ m[j].inhour;
                m[j].outmin= q[0].qm+ m[j].inmin;
                
                if( m[j].inmin>=60)
                {
                    m[j].inhour= m[j].inhour+1;
                    m[j].inmin= m[j].inmin-60;
                    
                }
                
               
                
                 qshift();
            }
        }
    }
    
    getpriority();
    prioritysort();
}

void qshift()
{   
    int i;
    if(top>0)
    {
        for(i=0;i<top;i++)
        {
            q[i]=q[i+1];
        }
    }
      
    top--;
    
}

void qdisplay()
{   check();
    printf("sr.no  Name\t\tbook hrs  approx wait time\n");
    for(int i=0;i<=top;i++)
    {
       printf("%d      %s %s\t%d:%d\t\t%d:%d\n",i+1,q[i].name,q[i].surname,q[i].qh,q[i].qm,q[i].wh,q[i].wm); 
    }
}



int main()
{   
    int choice;
    do
    {   
        printf("\n****Main Menu****\n1. Entry\n2.display\n3.qdisplay\n4.Exit\n");
        scanf("%d",&choice);
       
       
       switch(choice)
       {
            case 1: entry();
                    break;
                    
            case 2:  display();
                    break;
                    
            case 3: qdisplay();
                    break;
       }
    
    
    }while(choice!=4);
   
     return 0;
}










